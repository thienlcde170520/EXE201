// <auto-generated />
using System;
using EXE201.Commons.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EXE201.Commons.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250523115026_AddData")]
    partial class AddData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EXE201.Commons.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Client_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Psychologist_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Scheduled_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Client_ID");

                    b.HasIndex("Psychologist_ID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("EXE201.Commons.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EXE201.Commons.Models.Comment", b =>
                {
                    b.Property<int>("CommetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommetId"));

                    b.Property<string>("CommentContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateComment")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int?>("PodcastID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommetId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PodcastID");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("EXE201.Commons.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("EXE201.Commons.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PodcastID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PodcastID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EXE201.Commons.Models.Podcast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("audio_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("thumbnail_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreateBy");

                    b.ToTable("Podcasts");
                });

            modelBuilder.Entity("EXE201.Commons.Models.PodcastRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PodcastID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PodcastID");

                    b.HasIndex("UserID");

                    b.ToTable("PodcastRatings");
                });

            modelBuilder.Entity("EXE201.Commons.Models.PsychTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PsychTests");
                });

            modelBuilder.Entity("EXE201.Commons.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PsychTestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PsychTestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("EXE201.Commons.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EXE201.Commons.Models.UserTestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Result_Summary")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("create_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTestResults");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EXE201.Commons.Models.Admin", b =>
                {
                    b.HasBaseType("EXE201.Commons.Models.User");

                    b.Property<string>("AccessLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("EXE201.Commons.Models.Customer", b =>
                {
                    b.HasBaseType("EXE201.Commons.Models.User");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("AspNetUsers", t =>
                        {
                            t.Property("ProfilePictureUrl")
                                .HasColumnName("Customer_ProfilePictureUrl");
                        });

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("EXE201.Commons.Models.Psychologist", b =>
                {
                    b.HasBaseType("EXE201.Commons.Models.User");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Psychologist");

                    b.HasData(
                        new
                        {
                            Id = "c1b68810-e4d9-43e4-a2b3-cb15c1ed3da4",
                            AccessFailedCount = 0,
                            Address = "HCM, Việt Nam",
                            ConcurrencyStamp = "2eb2c2f6-ca4c-465c-a946-4fb6252e6f9b",
                            Email = "Thang123@gamil.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Lê Văn Thắng",
                            Phone = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "acc3a7f0-5ac6-4557-9747-49ba29626236",
                            TwoFactorEnabled = false,
                            UserName = "Lê Văn Thắng",
                            Degree = "~image/Degree/cunhantamly.jpg",
                            Description = "Nhà tâm lý học có nhiều năm kinh nghiệm trong ngành.",
                            Experience = "10 years",
                            Price = 1000000m,
                            ProfilePictureUrl = "~image/Doctor/Van_Thang.png"
                        },
                        new
                        {
                            Id = "4a0c8e83-3844-4be4-9f77-9b87443abc21",
                            AccessFailedCount = 0,
                            Address = "Hà Nội, Việt Nam",
                            ConcurrencyStamp = "28d4da1f-9f97-477e-8295-539427f26517",
                            Email = "Dungle123@gamil.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dung Lê",
                            Phone = "0987654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b67a5195-8c32-4018-a6d5-5d222f22f90d",
                            TwoFactorEnabled = false,
                            UserName = "Dung Lê",
                            Degree = "~image/Degree/cunhantamly.jpg",
                            Description = "Chuyên gia tư vấn tâm lý hôn nhân và gia đình.",
                            Experience = "7 years",
                            Price = 850000m,
                            ProfilePictureUrl = "~image/Doctor/Dung_Le.png"
                        },
                        new
                        {
                            Id = "9e31d33a-f266-4320-b7b2-df2fcb3dfe1a",
                            AccessFailedCount = 0,
                            Address = "Đà Nẵng, Việt Nam",
                            ConcurrencyStamp = "e8af0820-78fb-451d-9d38-731d2d7182a6",
                            Email = "HaLe123@gamil.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Hà Lê",
                            Phone = "0912345678",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95028aa7-118f-4f34-9cbf-243b73d0d74c",
                            TwoFactorEnabled = false,
                            UserName = "Hà Lê",
                            Degree = "~image/Degree/cunhantamly.jpg",
                            Description = "Tiến sĩ tâm lý học, chuyên về điều trị trầm cảm và rối loạn lo âu.",
                            Experience = "12 years",
                            Price = 1200000m,
                            ProfilePictureUrl = "~image/Doctor/Ha_Le.png"
                        },
                        new
                        {
                            Id = "067bf495-ca7f-4812-97a8-5d61d0229190",
                            AccessFailedCount = 0,
                            Address = "Cần Thơ, Việt Nam",
                            ConcurrencyStamp = "e1ef7f83-f993-4b5d-aa89-a085c4fee7e6",
                            Email = "KimNguyen123@gamil.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Kim Nguyễn",
                            Phone = "0933555777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b928d1fa-1ae2-4d4b-b186-4ce73181df67",
                            TwoFactorEnabled = false,
                            UserName = "Kim Nguyễn",
                            Degree = "~image/Degree/cunhantamly.jpg",
                            Description = "Tư vấn tâm lý cho trẻ em và thanh thiếu niên.",
                            Experience = "6 years",
                            Price = 750000m,
                            ProfilePictureUrl = "~image/Doctor/Kim_Nguan.png"
                        });
                });

            modelBuilder.Entity("EXE201.Commons.Models.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("EXE201.Commons.Models.Appointment", b =>
                {
                    b.HasOne("EXE201.Commons.Models.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("Client_ID");

                    b.HasOne("EXE201.Commons.Models.Psychologist", "Psychologist")
                        .WithMany("Appointments")
                        .HasForeignKey("Psychologist_ID");

                    b.Navigation("Customer");

                    b.Navigation("Psychologist");
                });

            modelBuilder.Entity("EXE201.Commons.Models.Comment", b =>
                {
                    b.HasOne("EXE201.Commons.Models.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("EXE201.Commons.Models.Podcast", "Podcast")
                        .WithMany()
                        .HasForeignKey("PodcastID");

                    b.HasOne("EXE201.Commons.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ParentComment");

                    b.Navigation("Podcast");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXE201.Commons.Models.Contact", b =>
                {
                    b.HasOne("EXE201.Commons.Models.User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXE201.Commons.Models.Order", b =>
                {
                    b.HasOne("EXE201.Commons.Models.Admin", null)
                        .WithMany("OrdersProcessed")
                        .HasForeignKey("AdminId");

                    b.HasOne("EXE201.Commons.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("EXE201.Commons.Models.Podcast", "Podcast")
                        .WithMany()
                        .HasForeignKey("PodcastID");

                    b.Navigation("Customer");

                    b.Navigation("Podcast");
                });

            modelBuilder.Entity("EXE201.Commons.Models.Podcast", b =>
                {
                    b.HasOne("EXE201.Commons.Models.Category", "Category")
                        .WithMany("Podcasts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE201.Commons.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXE201.Commons.Models.PodcastRating", b =>
                {
                    b.HasOne("EXE201.Commons.Models.Podcast", "Podcast")
                        .WithMany("PodcastRatings")
                        .HasForeignKey("PodcastID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXE201.Commons.Models.User", "User")
                        .WithMany("PodcastRatings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Podcast");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXE201.Commons.Models.Question", b =>
                {
                    b.HasOne("EXE201.Commons.Models.PsychTest", "PsychTest")
                        .WithMany("Questions")
                        .HasForeignKey("PsychTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PsychTest");
                });

            modelBuilder.Entity("EXE201.Commons.Models.UserTestResult", b =>
                {
                    b.HasOne("EXE201.Commons.Models.PsychTest", "PsychTest")
                        .WithMany("UserTestResults")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE201.Commons.Models.Customer", "Customer")
                        .WithMany("UserTestResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PsychTest");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EXE201.Commons.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EXE201.Commons.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE201.Commons.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE201.Commons.Models.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EXE201.Commons.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EXE201.Commons.Models.Category", b =>
                {
                    b.Navigation("Podcasts");
                });

            modelBuilder.Entity("EXE201.Commons.Models.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("EXE201.Commons.Models.Podcast", b =>
                {
                    b.Navigation("PodcastRatings");
                });

            modelBuilder.Entity("EXE201.Commons.Models.PsychTest", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserTestResults");
                });

            modelBuilder.Entity("EXE201.Commons.Models.User", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("PodcastRatings");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EXE201.Commons.Models.Admin", b =>
                {
                    b.Navigation("OrdersProcessed");
                });

            modelBuilder.Entity("EXE201.Commons.Models.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Orders");

                    b.Navigation("UserTestResults");
                });

            modelBuilder.Entity("EXE201.Commons.Models.Psychologist", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
